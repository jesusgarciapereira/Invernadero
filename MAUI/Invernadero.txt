ENT
	clsInvernadero{
		
		private int idInvernadero;
		private string nombre;
		
		public int IdInvernadero
		{
		    get { return idInvernadero; }
		    set { idInvernadero = value; } // // Para ASP sí lo necesito
		}
		public string Nombre
		{
		    get { return nombre; }
		    set { nombre = value; }
		}
		
		public clsInvernadero()
		{
		}
		public clsInvernadero(int idInvernadero)
		{
		    this.idInvernadero = idInvernadero;
		}
		public clsInvernadero(int idInvernadero, string nombre)
		{
		    this.idInvernadero = idInvernadero;
		    this.nombre = nombre;
		}
	}

	clsTemperatura{

		private int idInvernadero;
		private DateTime fecha;
		// Necesito que todos estos acepten un posible null
		private double? temp1; // Sólo una cifra decimal (ºC)
		private double? temp2;
		private double? temp3;
		private int? humedad1; // Un porcentaje
		private int? humedad2;
		private int? humedad3;

		public int IdInvernadero
		{
		    get { return idInvernadero; }
		    set { idInvernadero = value; } // Para ASP sí lo necesito
		}
		
		public DateTime Fecha
		{
		    get { return fecha; }
		    set { fecha = value; } // Para ASP sí lo necesito
		}
		
		public double? Temp1
		{
		    get { return temp1; }
		    set { temp1 = value; }
		}
		
		public double? Temp2
		{
		    get { return temp2; }
		    set { temp2 = value; }
		}
		
		public double? Temp3
		{
		    get { return temp3; }
		    set { temp3 = value; }
		}
		
		public int? Humedad1
		{
		    get { return humedad1; }
		    set { humedad1 = value; }
		}
		
		public int? Humedad2
		{
		    get { return humedad2; }
		    set { humedad2 = value; }
		}
		
		public int? Humedad3
		{
		    get { return humedad3; }
		    set { humedad3 = value; }
		}

		public clsTemperatura()
		{
		    // this.fecha = DateTime.Now; // Creo que aquí no, sino en fechaSeleccionada del VM
		}
		
		public clsTemperatura(int idInvernadero, DateTime fecha)
		{
		    this.idInvernadero = idInvernadero;
		    this.fecha = fecha;
		}
		
		public clsTemperatura(int idInvernadero, DateTime fecha, double? temp1, double? temp2, double? temp3, int? humedad1, int? humedad2, int? humedad3)
		{
		    this.idInvernadero = idInvernadero;
		    this.fecha = fecha;
		    this.temp1 = temp1;
		    this.temp2 = temp2;
		    this.temp3 = temp3;
		    this.humedad1 = humedad1;
		    this.humedad2 = humedad2;
		    this.humedad3 = humedad3;
		}
	}

DTO
	clsTemperaturaConNombreInvernadero : clsTemperatura{ // ¿hereda? SÍ

		private string nombreInvernadero;

		public string NombreInvernadero
		{
		    get { return nombreInvernadero; }
		}

		public clsTemperaturaConNombreInvernadero()
		{
		
		}

		// Creo que este Constructor no hace falta
		//public clsTemperaturaConNombreInvernadero(clsTemperatura temperatura)
		//     : base(temperatura.IdInvernadero, temperatura.Fecha, temperatura.Temp1, temperatura.Temp2, temperatura.Temp3, temperatura.Humedad1, temperatura.Humedad2, temperatura.Humedad3)
		//{
		
		//}
		
		public clsTemperaturaConNombreInvernadero(clsTemperatura temperatura, string nombreInvernadero)
		    : base(temperatura.IdInvernadero, temperatura.Fecha, temperatura.Temp1, temperatura.Temp2, temperatura.Temp3, temperatura.Humedad1, temperatura.Humedad2, temperatura.Humedad3)
		{
		    this.nombreInvernadero = nombreInvernadero;
		}
	}

DAL
	clsListadosInvernaderosDAL{
		public static List<clsInvernadero> ObtenerListadoInvernaderosDAL(){
			// TODO: Llama a la lista de invernaderos de la Base de Datos
		}

		// No es necesario en este ejercicio, no lo incluiré
		public static clsInvernadero ObtenerInvernaderoPorIdDAL(int id){ 
			// TODO: Obtén de la Base de Datos el invernadero correspondiente al id del parámetro
		}
	}

	clsListadosTemperaturasDAL{
		// No es necesario en este ejercicio pero lo incluiré para futuras ampliaciones a largo plazo
		public static List<clsTemperatura> ObtenerListadoTemperaturasDAL(){
			// TODO: Llama a la lista de temperaturas de la Base de Datos
		}
	
	}

	clsListadosTemperaturaConNombreInvernaderoDAL{
		// No es necesario en este ejercicio pero lo incluiré para futuras ampliaciones a largo plazo
		public static List<clsTemperaturaConNombreInvernadero> ObtenerListadoTemperaturasConNombreInvernaderoDAL(){
			// TODO: Llama a la lista de temperaturaConNombreInvernadero de la Base de Datos
		}

		public static clsTemperaturaConNombreInvernadero ObtenerTemperaturaConNombreInvernaderoPorPKDAL(int idInvernadero, DateTime fecha){ 
			// TODO: Obtén de la Base de Datos el invernadero correspondiente a los PK del parámetro
		}
	}

	Conexion
		clsMyConnection{
		}

BL
	clsListadosInvernaderosBL{
		public static List<clsInvernadero> ObtenerListadoInvernaderosBL()
		{
			return clsListadosInvernaderosDAL.ObtenerListadoInvernaderosDAL();
		}
		// No es necesario en este ejercicio, no lo incluiré
		public static clsInvernadero ObtenerInvernaderoPorIdBL(int id){ 
			return clsListadosInvernaderosDAL.ObtenerListadoInvernaderosPorIdDAL();
		}
	}

	clsListadosTemperaturasBL{
		// No es necesario en este ejercicio pero lo incluiré para futuras ampliaciones a largo plazo
		public static List<clsTemperatura> ObtenerListadoTemperaturasBL()
        {
            return clsListadosTemperaturasDAL.ObtenerListadoTemperaturasDAL();
        }
	}

	clsListadosTemperaturaConNombreInvernaderoBL{
		// No es necesario en este ejercicio pero lo incluiré para futuras ampliaciones a largo plazo
		public static List<clsTemperaturaConNombreInvernadero> ObtenerListadoTemperaturasConNombreInvernaderoBL()
		{
			return clsListadosTemperaturaConNombreInvernaderoDAL.ObtenerListadoTemperaturasConNombreInvernaderoDAL();
		}

		public static clsTemperaturaConNombreInvernadero ObtenerTemperaturasConNombreInvernaderoPorPKBL(int idInvernadero, DateTime fecha)
        {
            return clsListadosTemperaturaConNombreInvernaderoDAL.ObtenerTemperaturasConNombreInvernaderoPorPKDAL(idInvernadero, fecha);
        }
	}

MAUI
	VM
		// Para la página 1. 
		clsSeleccionarInvernaderoVM { // Creo que no hereda, pues no hereda
			private List<clsInvernadero> listadoInvernaderos;
			private clsInvernadero invernaderoSeleccionado;
			private DateTime fechaSeleccionada;
			private DelegateCommand botonVer;
			
			public List<clsInvernadero> ListadoInvernaderos
			{
			    get { return listadoInvernaderos; }
			}

			public clsInvernadero InvernaderoSeleccionado
			{
			    get { return invernaderoSeleccionado; }
			    set
			    {
			        invernaderoSeleccionado = value;
			        botonVer.RaiseCanExecuteChanged();
			    }
			}

			public DateTime FechaSeleccionada
			{
			    get { return fechaSeleccionada; }
			    set
			    {
			        fechaSeleccionada = value;
			        botonVer.RaiseCanExecuteChanged();
			    }
			}

			public DelegateCommand BotonVer
			{
			    get { return botonVer; }
			}
			
			public clsSeleccionarInvernaderoVM()
			
			{
			   // TODO: Inicializa todos los Atributos necesarios y el Command			
			}

			private async void muestraMensaje(string titulo, string cuerpo, string boton)
			{
			    // TODO: Mostrar un mensaje emergente.
			}

			private async void enviaDatosNavigation(clsTemperaturaConNombreInvernadero temperaturasConNombreInvernadero) 
			{
			    // TODO: Navegar a la siguiente página pasando el objeto del parámetro
			}

			private void verExecute()
			{
			    // TODO: Acciones y mensajes necesarios para ver el Invernadero seleccionado
			}

			private bool habilitarVer()
			{
			    // TODO: Acciones necesarias para habilitar el Boton
			}
		}

		// Para la página 2
		clsInvernaderoSeleccionadoVM { // ¿hereda? aquí NO

			private clsTemperaturaConNombreInvernadero temperaturasDeInvernadero;
			// Con los Converter no necesito más atributos

			public clsTemperaturaConNombreInvernadero TemperaturasDeInvernadero
			{
			    get { return temperaturasDeInvernadero; }
			}	

			public InvernaderoSeleccionadoVM()
			{

			}

			public InvernaderoSeleccionadoVM(clsTemperaturaConNombreInvernadero temperaturasDeInvernadero)
			{
			    TODO: Asigna temperaturasDeInvernadero 
			}
		}

	Views
		SeleccionarInvernaderoPage // Página 1
		InvernaderoSeleccionadoPage // Página 2

ASP
	Controllers
		HomeController: Controller{
				public IActionResult Index(){
					// TODO: Muestra la vista principal con el formulario de selección de invernadero y fecha
				}

				[HttpPost]
				public IActionResult Index(int idInvernadero, DateTime fecha){
					// TODO: Retorna a la vista Index desde la vista details pero con los datos seleccionados anteriormente
				}

				public IActionResult Details(int idInvernadero, DateTime fecha){
					// TODO: Muestra los detalles de las temperaturas registradas para un invernadero en una fecha específica.
				}
			}	
			
	Models	
		VM
			// Para la página 1. 
			public class clsSeleccionarInvernaderoVM
			{
				private List<clsInvernadero> listadoInvernaderos;

				// Los necesito, pero los puedo evitar con ViewBag en el Controller
				// private int idInvernaderoSeleccionado; 
				// private DateTime fechaSeleccionada;
        
				public List<clsInvernadero> ListadoInvernaderos
				{
				    get { return listadoInvernaderos; }
				}

				// Ya no hacen falta si existen los ViewBag
				//public DateTime FechaSeleccionada
				//{
				//    get { return fechaSeleccionada; }
				//    set
				//    {
				//        fechaSeleccionada = value;
				//    }
				//}

				//public int IdInvernaderoSeleccionado
				//{
				//    get { return idInvernaderoSeleccionado; }
				//    set
				//    {
				//        idInvernaderoSeleccionado = value;
				//    }
				//}

				public clsSeleccionarInvernaderoVM()
				{
					// TODO: Inicializa todos los Atributos necesarios
				}
			}

			// Para la página 2 ya tengo el Model necesario en el DTO

	Views
		Index // Página 1
		Details // Página 2

 